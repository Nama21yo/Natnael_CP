# Problem: Lowest Common Ancestor of a Binary Search Tree - https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-search-tree/

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */

class Solution {
    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
    // If the current node is null, return null (base case for recursion)
    if(root == null) return null;

    int curr = root.val; // Store the current node's value
    
    // If both p and q are greater than the current node, LCA must be in the right subtree
    if(curr < p.val && curr < q.val) {
        return lowestCommonAncestor(root.right, p, q);
    }
    
    // If both p and q are less than the current node, LCA must be in the left subtree
    if(curr > p.val && curr > q.val) {
        return lowestCommonAncestor(root.left, p, q);
    }
    
    // If the current node is between p and q (inclusive), it is the LCA
    return root;
}

}