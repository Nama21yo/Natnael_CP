# Problem: Minimize Malware Spread - https://leetcode.com/problems/minimize-malware-spread/


class Solution:
    def minMalwareSpread(self, graph: List[List[int]], initial: List[int]) -> int:
        n = len(graph)
        GRAPH = defaultdict(set)
        infected = set(initial)
        seen = [False] * n

        for i in range(n):
            for j in range(n):
                if i != j and graph[i][j]:
                    GRAPH[i].add(j)

        def dfs(node):
            seen[node] = True
            rep = node if node in infected else float("inf")
            inf_count = 1 if node in infected else 0
            size = 1

            for adj in GRAPH[node]:
                if not seen[adj]:
                    sub_rep, sub_size, sub_infected = dfs(adj)
                    rep = min(rep, sub_rep)
                    size += sub_size
                    inf_count += sub_infected

            return rep, size, inf_count

        max_size = 0
        best = float("inf")
        for node in range(n):
            if not seen[node]:
                rep, size, inf_count = dfs(node)
                if inf_count == 1:
                    if size > max_size or (size == max_size and rep < best):
                        best = rep
                        max_size = size

        return min(initial) if best == float("inf") else best
